#!/usr/bin/env python3

import pygame
import time  # Add this import
from colors import *
from tetromino import Tetromino
from highscores import HighScores


class Tetris:
    def __init__(self):
        pygame.init()

        # Window settings
        self.CELL_SIZE = 30
        self.GRID_WIDTH = 10
        self.GRID_HEIGHT = 20
        self.SCREEN_WIDTH = self.CELL_SIZE * (
            self.GRID_WIDTH + 8
        )  # Extra space for next piece and score
        self.SCREEN_HEIGHT = self.CELL_SIZE * self.GRID_HEIGHT

        # Initialize display
        self.screen = pygame.display.set_mode((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        pygame.display.set_caption("Aesthetic Tetris")

        # Game state
        self.grid = [
            [None for _ in range(self.GRID_WIDTH)] for _ in range(self.GRID_HEIGHT)
        ]
        self.current_piece = None
        self.next_piece = None
        self.score = 0
        self.game_over = False
        self.paused = False

        # Game speed
        self.clock = pygame.time.Clock()
        self.fall_time = 0
        self.fall_speed = 0.5  # Time in seconds between piece movements
        self.last_time = time.time()  # Use time.time() instead of pygame.time.get_ticks()

        # Initialize pieces
        self.spawn_piece()

        # Add high scores
        self.high_scores = HighScores()
        self.game_over_screen = False

    def spawn_piece(self):
        if not self.next_piece:
            self.next_piece = Tetromino()
        self.current_piece = self.next_piece
        self.next_piece = Tetromino()

        # Game over check - only set game over screen, don't add score here
        if not self.is_valid_move(self.current_piece):
            self.game_over_screen = True

    def is_valid_move(self, piece, offset_x=0, offset_y=0):
        for y, row in enumerate(piece.shape):
            for x, cell in enumerate(row):
                if cell:
                    new_x = piece.x + x + offset_x
                    new_y = piece.y + y + offset_y

                    if (
                        new_x < 0
                        or new_x >= self.GRID_WIDTH
                        or new_y >= self.GRID_HEIGHT
                        or (new_y >= 0 and self.grid[new_y][new_x])
                    ):
                        return False
        return True

    def run(self):
        while not self.game_over:
            current_time = time.time()  # Use time.time() instead of pygame.time.get_ticks()
            delta_time = current_time - self.last_time
            self.last_time = current_time

            self.handle_events()

            # Only update game if not paused and not in game over
            if not self.game_over_screen and not self.paused:
                self.update(delta_time)

            self.draw()
            self.clock.tick(60)

        pygame.quit()

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.game_over = True

            elif event.type == pygame.KEYDOWN:
                # Game over screen controls
                if self.game_over_screen:
                    if event.key == pygame.K_SPACE:
                        self.reset_game()
                    elif (
                        event.key == pygame.K_q and event.mod & pygame.KMOD_SHIFT
                    ):  # Shift + Q
                        self.game_over = True

                # In-game controls
                else:
                    if event.key == pygame.K_r:
                        self.paused = not self.paused
                        if not self.paused:
                            self.last_time = pygame.time.get_ticks()
                    elif not self.paused:  # Only process game controls if not paused
                        if event.key in (pygame.K_LEFT, pygame.K_h):
                            if self.is_valid_move(self.current_piece, offset_x=-1):
                                self.current_piece.move(-1, 0)
                        elif event.key in (pygame.K_RIGHT, pygame.K_l):
                            if self.is_valid_move(self.current_piece, offset_x=1):
                                self.current_piece.move(1, 0)
                        elif event.key in (pygame.K_DOWN, pygame.K_j):
                            if self.is_valid_move(self.current_piece, offset_y=1):
                                self.current_piece.move(0, 1)
                        elif event.key in (pygame.K_UP, pygame.K_k):
                            self.current_piece.rotate()
                            if not self.is_valid_move(self.current_piece):
                                self.current_piece.rotate(-1)
                        elif event.key == pygame.K_SPACE:
                            while self.is_valid_move(self.current_piece, offset_y=1):
                                self.current_piece.move(0, 1)
                            self.lock_piece()
                            if not self.game_over_screen:
                                self.clear_lines()
                                self.spawn_piece()
                            self.fall_time = 0
                        elif event.key == pygame.K_q:
                            if event.mod & pygame.KMOD_SHIFT:  # Shift + Q
                                self.game_over = True
                            else:  # just q
                                self.game_over_screen = True

            elif event.type == pygame.WINDOWFOCUSLOST:
                self.paused = True
            elif event.type == pygame.WINDOWFOCUSGAINED:
                self.paused = False
                self.last_time = pygame.time.get_ticks()

    def update(self, delta_time):
        # Update fall time
        self.fall_time += delta_time

        # Move piece down if enough time has passed
        if self.fall_time >= self.fall_speed:
            if self.is_valid_move(self.current_piece, offset_y=1):
                self.current_piece.move(0, 1)
            else:
                self.lock_piece()
                # Only continue if game isn't over
                if not self.game_over_screen:
                    self.clear_lines()
                    self.spawn_piece()
            self.fall_time = 0  # Reset fall time after moving piece

    def draw(self):
        # Create static background surface once
        if not hasattr(self, "background"):
            self.background = pygame.Surface((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
            self.background.fill(BLACK)
            # Draw static grid lines
            for x in range(self.GRID_WIDTH + 1):
                pygame.draw.line(
                    self.background,
                    GRAY,
                    (x * self.CELL_SIZE, 0),
                    (x * self.CELL_SIZE, self.GRID_HEIGHT * self.CELL_SIZE),
                )
            for y in range(self.GRID_HEIGHT + 1):
                pygame.draw.line(
                    self.background,
                    GRAY,
                    (0, y * self.CELL_SIZE),
                    (self.GRID_WIDTH * self.CELL_SIZE, y * self.CELL_SIZE),
                )

        # Draw background
        self.screen.blit(self.background, (0, 0))

        # Draw grid blocks
        for y in range(self.GRID_HEIGHT):
            for x in range(self.GRID_WIDTH):
                if self.grid[y][x]:
                    pygame.draw.rect(
                        self.screen,
                        self.grid[y][x],
                        (
                            x * self.CELL_SIZE,
                            y * self.CELL_SIZE,
                            self.CELL_SIZE - 1,
                            self.CELL_SIZE - 1,
                        ),
                    )

        # Draw current piece
        if self.current_piece:
            for y, row in enumerate(self.current_piece.shape):
                for x, cell in enumerate(row):
                    if cell:
                        pygame.draw.rect(
                            self.screen,
                            self.current_piece.color,
                            (
                                (self.current_piece.x + x) * self.CELL_SIZE,
                                (self.current_piece.y + y) * self.CELL_SIZE,
                                self.CELL_SIZE - 1,
                                self.CELL_SIZE - 1,
                            ),
                        )

        # Draw next piece preview
        if self.next_piece:
            preview_x = self.GRID_WIDTH * self.CELL_SIZE + 50
            preview_y = 50
            for y, row in enumerate(self.next_piece.shape):
                for x, cell in enumerate(row):
                    if cell:
                        pygame.draw.rect(
                            self.screen,
                            self.next_piece.color,
                            (
                                preview_x + x * self.CELL_SIZE,
                                preview_y + y * self.CELL_SIZE,
                                self.CELL_SIZE - 1,
                                self.CELL_SIZE - 1,
                            ),
                        )

        # Draw score
        font = pygame.font.Font(None, 36)
        score_text = font.render(f"Score: {self.score}", True, WHITE)
        self.screen.blit(score_text, (self.GRID_WIDTH * self.CELL_SIZE + 20, 200))

        # Draw high scores
        high_score_x = self.GRID_WIDTH * self.CELL_SIZE + 20
        high_score_y = 250

        self.screen.blit(
            font.render("High Scores:", True, WHITE), (high_score_x, high_score_y)
        )

        for i, score in enumerate(self.high_scores.get_top_scores()):
            score_text = font.render(f"{i+1}. {score}", True, WHITE)
            self.screen.blit(score_text, (high_score_x, high_score_y + 40 * (i + 1)))

        # Draw pause status if game is paused
        if self.paused and not self.game_over_screen:
            font = pygame.font.Font(None, 64)
            pause_text = font.render("PAUSED", True, WHITE)
            text_rect = pause_text.get_rect(
                center=(self.SCREEN_WIDTH / 2, self.SCREEN_HEIGHT / 2)
            )

            # Create semi-transparent overlay
            overlay = pygame.Surface((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
            overlay.fill(BLACK)
            overlay.set_alpha(128)
            self.screen.blit(overlay, (0, 0))
            self.screen.blit(pause_text, text_rect)

        # If game is over, show game over screen
        if self.game_over_screen:
            self.draw_game_over()

        pygame.display.flip()

    def draw_game_over(self):
        # Create semi-transparent overlay
        overlay = pygame.Surface((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        overlay.fill(BLACK)
        overlay.set_alpha(128)
        self.screen.blit(overlay, (0, 0))

        font = pygame.font.Font(None, 64)
        if self.score != 0 and self.score > self.high_scores.get_highest_score():
            game_over_text = font.render("Highest score!", True, WHITE)
        else:
            game_over_text = font.render("GAME OVER", True, WHITE)
        score_text = font.render(f"Score: {self.score}", True, WHITE)
        continue_text = font.render("Press SPACE to restart", True, WHITE)
        quit_text = font.render("Press Q to quit", True, WHITE)

        # Center the text
        for i, text in enumerate(
            [game_over_text, score_text, continue_text, quit_text]
        ):
            text_rect = text.get_rect(
                center=(self.SCREEN_WIDTH / 2, self.SCREEN_HEIGHT / 2 - 100 + i * 60)
            )
            self.screen.blit(text, text_rect)

    def lock_piece(self):
        for y, row in enumerate(self.current_piece.shape):
            for x, cell in enumerate(row):
                if cell:
                    grid_y = self.current_piece.y + y
                    grid_x = self.current_piece.x + x
                    if grid_y >= 0:
                        self.grid[grid_y][grid_x] = self.current_piece.color
                        # Check if piece is locked at or above the top
                        if grid_y <= 0:
                            self.game_over_screen = True
                            return

    def clear_lines(self):
        lines_cleared = 0
        y = self.GRID_HEIGHT - 1
        while y >= 0:
            if all(cell for cell in self.grid[y]):
                # Remove the line
                self.grid.pop(y)
                # Add new empty line at top
                self.grid.insert(0, [None for _ in range(self.GRID_WIDTH)])
                lines_cleared += 1
            else:
                y -= 1

        # Update score - Modified scoring system with 10-point base
        if lines_cleared > 0:
            points = {
                1: 10,  # Single line = 10 points
                2: 30,  # Double = 30 points
                3: 50,  # Triple = 50 points
                4: 80,  # Tetris = 80 points
            }
            self.score += points.get(lines_cleared, 0)

    def reset_game(self):
        # Only save score if game was actually over
        if self.game_over_screen:
            self.high_scores.add_score(self.score)

        # Reset game state
        self.grid = [
            [None for _ in range(self.GRID_WIDTH)] for _ in range(self.GRID_HEIGHT)
        ]
        self.score = 0
        self.game_over_screen = False
        self.current_piece = None
        self.next_piece = None
        self.spawn_piece()
        self.fall_time = 0


if __name__ == "__main__":
    game = Tetris()
    game.run()
